//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 3/25/2023 5:42:16 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Water_Meter_Model
{

    public partial class Utsa_WaterMeterContext : DbContext
    {

        public Utsa_WaterMeterContext() :
            base()
        {
            OnCreated();
        }

        public Utsa_WaterMeterContext(DbContextOptions<Utsa_WaterMeterContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=kenpei-azuresql01.database.windows.net;Initial Catalog=utsa-watermeter;Integrated Security=False;Persist Security Info=True;User ID=sa_utsawatermeter;Password=yiCFc26Lk3t7HYM2");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Device> Devices
        {
            get;
            set;
        }

        public virtual DbSet<Measurement> Measurements
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.DeviceMapping(modelBuilder);
            this.CustomizeDeviceMapping(modelBuilder);

            this.MeasurementMapping(modelBuilder);
            this.CustomizeMeasurementMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Device Mapping

        private void DeviceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Device>().ToTable(@"Devices", @"dbo");
            modelBuilder.Entity<Device>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Device>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Device>().Property(x => x.MAC_Address).HasColumnName(@"MAC_Address").HasColumnType(@"nvarchar(17)").IsRequired().ValueGeneratedNever().HasMaxLength(17);
            modelBuilder.Entity<Device>().Property(x => x.Model).HasColumnName(@"Model").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Device>().HasKey(@"Id");
            modelBuilder.Entity<Device>().HasIndex(@"MAC_Address").IsUnique(true);
        }

        partial void CustomizeDeviceMapping(ModelBuilder modelBuilder);

        #endregion

        #region Measurement Mapping

        private void MeasurementMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Measurement>().ToTable(@"Measurements", @"dbo");
            modelBuilder.Entity<Measurement>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Measurement>().Property(x => x.TimeStamp).HasColumnName(@"TimeStamp").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Measurement>().Property(x => x.Liters).HasColumnName(@"Liters").HasColumnType(@"numeric(7,3)").IsRequired().ValueGeneratedNever().HasPrecision(7, 3);
            modelBuilder.Entity<Measurement>().Property(x => x.DeviceId).HasColumnName(@"DeviceId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<Measurement>().HasKey(@"Id");
        }

        partial void CustomizeMeasurementMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Device>().HasMany(x => x.Measurements).WithOne().HasForeignKey(@"DeviceId").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
